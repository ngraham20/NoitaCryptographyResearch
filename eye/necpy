#!/usr/bin/env python

import json
from ui import UI
from message import Message
from subcipher import SubCipher
from wheel import Wheel
from panel import Panel

def load_config(filename):
    f = open(filename)
    eyes=json.load(f)
    f.close()
    return eyes

def handle_args(data):
    eyes = load_config(data["confjson"]) if 'confjson' in data else None
    # history = [] if "history" in data else None
    tasks = eyes.get("tasks", [])
    messages = eyes.get("messages", [])
    delimiter = eyes.get("delimiter")
    fmt = eyes.get("format")
    style = eyes.get("style")

    for task in tasks:
        if task == "display":
            for i, (name, message) in enumerate(messages.items()):
                # if len(message[1]) > 1:
                #     if message[1][1] == 's':
                #         style = "ascii"
                #     elif message[1][1] == 'a':
                #         style = "alchemic"
                #     elif message[1][1] == 'r':
                #         style = "runic"
                #     elif message[1][1] == 'd':
                #         style = "decimal"
                print(Message(name, message, delimiter).as_panel(UI.size, fmt, style))
            else:
                print("Cannot print eyes messages if no eyes file is supplied.")
        elif task == "encrypt" or task == "decrypt":
            origin = data["origin"] if "origin" in data else None
            ciphernodes = [origin] if origin else []
            wheelgroups = data['w'] if 'w' in data else None
            current_wheelgroup = 0
            ciphers = data['ciphers'] if 'ciphers' in data else []
            # Describe what will happen during cipher step
            modulepaneldata = ["Cipher " + str(i+1) + ": " + x for i,x in enumerate(ciphers)]
            print(Panel(modulepaneldata, UI.size,1,"Encryption Order"))
            for ciphername in ciphers:
                if ciphername == "substitution":
                    # wow! using map with a constructor actually works!
                    wheels = list(map(Wheel, wheelgroups[current_wheelgroup]))
                    current_wheelgroup = (current_wheelgroup + 1) % len(wheelgroups)
                    cipher = SubCipher(wheels)
                ciphernodes.append(cipher.encode(ciphernodes[-1], history))
            cipherpaneldata = ["Encryption Step " + str(i) + ": " + x for i,x in enumerate(ciphernodes)]
            print(Panel(cipherpaneldata,UI.size,1,"Cipher Nodes"))
            resultpaneldata =  ["Plaintext:      " + origin]
            resultpaneldata += ["Ciphertext:     " + ciphernodes[-1]]
            print(Panel(resultpaneldata,UI.size,1,None,"Results"))

def main():

    UI.program_header()
    ea = UI.parse_args()
    handle_args(ea)

if __name__ == "__main__":
    main()