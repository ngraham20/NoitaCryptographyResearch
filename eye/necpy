#!/usr/bin/env python

import json
from ui import UI
from message import Message
from subcipher import SubCipher
from wheel import Wheel
from panel import Panel

def handle_args(eyes, data):
    history = [] if "history" in data else None

    if data["eyemodule"] == "message":
        for message in data['m']:
            fmt = None
            style = None
            if message[1][0] == 't':
                fmt = "trigrams"
            elif message[1][0] == 'l':
                fmt = "lines"
            if len(message[1]) > 1:
                if message[1][1] == 's':
                    style = "ascii"
                elif message[1][1] == 'a':
                    style = "alchemic"
                elif message[1][1] == 'r':
                    style = "runic"
                elif message[1][1] == 'd':
                    style = "decimal"
            print(Message.from_eyes(eyes, message[0]).as_panel(UI.size, fmt, style))
    elif data["eyemodule"] == "cipher":
        origin = data["origin"] if "origin" in data else None
        ciphernodes = [origin] if origin else []
        wheelgroups = data['w'] if 'w' in data else None
        current_wheelgroup = 0
        ciphers = data['ciphers'] if 'ciphers' in data else []
        for ciphername in ciphers:
            if ciphername == "substitution":
                # wow! using map with a constructor actually works!
                wheels = list(map(Wheel, wheelgroups[current_wheelgroup]))
                current_wheelgroup = (current_wheelgroup + 1) % len(wheelgroups)
                cipher = SubCipher(wheels)
            ciphernodes.append(cipher.encode(ciphernodes[-1], history))        
        print(Panel(ciphernodes,UI.size,1,"Cipher Nodes"))

def main():
    f = open('eyes.json')
    eyes=json.load(f)
    f.close()

    UI.program_header()
    ea = UI.parse_args()
    handle_args(eyes, ea)

if __name__ == "__main__":
    main()