#!/usr/bin/env python

import json
from itertools import cycle, islice, chain
from ui import UI
from message import Message
from subcipher import SubCipher
from alberticipher import AlbertiCipher
from eyecipher import EyeCipher
from analysis import FreqAnalysis
from wheel import Wheel
from panel import Panel

def load_config(filename):
    f = open(filename)
    eyes=json.load(f)
    f.close()
    return eyes

def handle_args(data):
    eyes = load_config(data["confjson"]) if 'confjson' in data else data
    historystyle = eyes.get("history", None)
    history = [] if historystyle else None
    tasks = eyes.get("tasks", [])
    analyses = eyes.get("analyses", [])
    delimiter = eyes.get("delimiter")
    messages = [Message(k, v, delimiter) for i, (k, v) in enumerate(eyes.get("messages").items())]
    results = []
    analysisdata= ""
    messageanalysisdata = ""
    cipheroptions = eyes.get("cipheroptions")
    analysisoptions = eyes.get("analysisoptions")
    wheelgroups = eyes.get("wheels", [])
    fmt = eyes.get("format")
    style = eyes.get("style")
    for message in messages:
        for task in tasks:
            if task == "display":
                print(message.as_panel(UI.size, fmt, style))
            if task == "encrypt" or task == "decrypt":

                if fmt == "trigrams":
                    ciphernodes = [''.join(message.as_trigrams(style))]
                elif fmt == "plain":
                    ciphernodes = [''.join(message.text)]
                current_wheelgroup = 0
                fromtext = ""
                totext = ""
                ciphers = eyes.get("ciphers", [])
                cipherwheelgroups = list(zip(ciphers, list(islice(cycle(wheelgroups), len(ciphers)))))
        
                # DISPLAY PROCESS
                subpanels = []
                for group in cipherwheelgroups:
                    subpanels += Panel(["Wheel: " + x for x in group[1]], UI.size,1,None,group[0].capitalize() + " Cipher").as_lines()
                    if group[0] == "eye":
                        subpanels += Panel([x for _, (x, _) in enumerate(cipheroptions.items())], UI.size, 1, None, "CipherOptions").as_lines()
                print(Panel(subpanels[1::], UI.size,0,message.name + ": Cipher Order"))

                # PERFORM ENCRYPTION STEPS
                for ciphername in ciphers:
                    if ciphername == "substitution":
                        wheels = list(map(Wheel, wheelgroups[current_wheelgroup]))
                        # wow! using map with a constructor actually works!
                        current_wheelgroup = (current_wheelgroup + 1) % len(wheelgroups)
                        cipher = SubCipher(wheels)
                    elif ciphername == "alberti":
                        wheels = list(map(Wheel, wheelgroups[current_wheelgroup]))
                        current_wheelgroup = (current_wheelgroup + 1) % len(wheelgroups)
                        cipher = AlbertiCipher(wheels)
                    elif ciphername == "eye":
                        wheels = list(map(Wheel, wheelgroups[current_wheelgroup]))
                        current_wheelgroup = (current_wheelgroup + 1) % len(wheelgroups)
                        cipher = EyeCipher(wheels, cipheroptions)
                    
                    if task == "encrypt":
                        fromtext = "Plaintext:  "
                        totext   = "Ciphertext: "
                        ciphernodes.append(cipher.encode(ciphernodes[-1], history))
                    elif task == "decrypt":
                        fromtext = "Ciphertext: "
                        totext   = "Plaintext:  "
                        ciphernodes.append(cipher.decode(ciphernodes[-1], history))
                cipherpaneldata = None
                if historystyle == "simple":
                    cipherpaneldata = ["Encryption Step " + str(i) + ": " + x for i,x in enumerate(ciphernodes)]
                    cpdg = 0
                elif historystyle == "detailed":
                    cipherpaneldata = history
                    cpdg = 5
                
                if cipherpaneldata:
                    print(Panel(cipherpaneldata,UI.size,1,message.name + ": Encryption").with_groupsize(cpdg))

                resultpaneldata =  [fromtext + ciphernodes[0]]
                resultpaneldata += [totext + ciphernodes[-1]]
                messageanalysisdata += ciphernodes[0]
                analysisdata += ciphernodes[-1]
                results.append((message.name, ciphernodes[-1]))
                print(Panel(resultpaneldata,UI.size,1,None,"Results"))
                print('\n')


    for analysis in analyses:
        if analysis == "frequency":
            freqdata = []
            if analysisoptions.get("AnalyzeEach", False):
                for i, (name, message) in enumerate(results):
                    (l, c, f) = FreqAnalysis.get_stats(message)

                    freqdata.append({
                        "letters": l,
                        "count": c,
                        "frequency": f,
                        "color": "blue",
                        "title": name
                    })

            if analysisoptions.get("AnalyzeCombined", False):
                (l, c, f) = FreqAnalysis.get_stats(''.join([x[1] for x in results]))
                freqdata.append({
                    "letters": l,
                    "count": c,
                    "frequency": f,
                    "color": "blue",
                    "title": "Ciphertext"
                })

            fa = FreqAnalysis(freqdata, analysisoptions, 1)            
            fa.analyze(analysisoptions.get("CompareWith", []))



def main():

    UI.program_header()
    ea = UI.parse_args()
    handle_args(ea)

if __name__ == "__main__":
    main()